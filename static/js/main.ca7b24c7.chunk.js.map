{"version":3,"sources":["components/Pagination/Pagination.tsx","utils.ts","App.tsx","index.tsx"],"names":["Pagination","total","perPage","currentPage","onPageChange","MAX_PAGE","Math","ceil","items","from","to","numbers","n","push","getNumbers","map","pages","Array","fill","page","pageIndex","isFirstPage","isLastPage","bottomRange","topRange","className","href","onClick","slice","item","App","useState","setPage","setPerPage","calculateRange","id","value","onChange","event","newPerPage","target","htmlFor","newPage","ReactDOM","render","document","getElementById"],"mappings":"8KASaA,EAAa,SAAC,GAKH,IAJtBC,EAIqB,EAJrBA,MACAC,EAGqB,EAHrBA,QACAC,EAEqB,EAFrBA,YACAC,EACqB,EADrBA,aAEMC,EAAWC,KAAKC,KAAKN,EAAQC,GAE7BM,ECjBD,SAAoBC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,EDUOG,CAAW,EAAGb,GACzBc,KAAI,SAACH,GAAD,qBAAuBA,MAExBI,EAAQ,IAAIC,MAAMZ,GACrBa,KAAK,GAAGH,KAAI,SAACI,EAAMC,GAKlB,OAFWA,EAAY,KAKrBC,EAbW,IAaGlB,EACdmB,EAAanB,IAAgBE,EAC7BkB,GAAepB,EAAc,GAAKD,EAClCsB,EAAWrB,EAAcD,EAE/B,OACE,qCACE,qBAAIuB,UAAU,aAAd,UACE,oBAAIA,UAAS,oBAAeJ,GAAe,YAA3C,SACE,mBACE,UAAQ,WACRI,UAAU,YACVC,KAAK,QACL,gBAAeL,EACfM,QAAS,kBAAON,GAAejB,EAAaD,EAAc,IAL5D,oBAUDa,EAAMD,KAAI,SAAAI,GAAI,OACb,oBACEM,UAAS,oBAAetB,IAAgBgB,GAAQ,UADlD,SAIE,mBACE,UAAQ,WACRM,UAAU,YACVC,KAAI,WAAMP,GACVQ,QAAS,kBAAMvB,EAAae,IAJ9B,SAMIA,KARCA,MAYT,oBAAIM,UAAS,oBAAeH,GAAc,YAA1C,SACE,mBACE,UAAQ,WACRG,UAAU,YACVC,KAAK,QACL,gBAAeJ,EACfK,QAAS,kBAAOL,GAAclB,EAAaD,EAAc,IAL3D,uBAWJ,6BACGK,EACEoB,MAAML,EAAaC,GACnBT,KAAI,SAACc,GAAD,OACH,oBAAI,UAAQ,OAAZ,SAAoBA,aEtEnBC,EAAgB,WAC3B,MAAwBC,mBAAS,GAAjC,mBAAOZ,EAAP,KAAaa,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAO7B,EAAP,KAAgB+B,EAAhB,KAsBA,OACE,sBAAKR,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWN,EADX,mBAxBmB,WACrB,IACMI,EADeJ,EAAOjB,EACOA,EAC7BsB,EAAWD,EAAcrB,EATrB,MAUEqB,EAAcrB,EAE1B,MAAM,GAAN,OAAUqB,EAAc,EAAxB,cAA+BC,GAmBHU,GAD1B,eA9BQ,GA8BR,OAIA,sBAAKT,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRU,GAAG,kBACHV,UAAU,eACVW,MAAOlC,EACPmC,SAAU,SAACC,GA1BO,IAACC,MA0BsBD,EAAME,OAAOJ,SAzB1ClC,IAClB+B,GAAYM,GACZP,EAAQ,KAkBJ,UAOE,wBAAQI,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOK,QAAQ,kBAAkBhB,UAAU,qBAA3C,+BAIF,cAAC,EAAD,CACExB,MAvDM,GAwDNC,QAASA,EACTC,YAAagB,EACbf,aApCmB,SAACsC,GACxBV,EAAQU,UC3BZC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.ca7b24c7.chunk.js","sourcesContent":["import { getNumbers } from '../../utils';\n\ninterface PaginationProps {\n  total: number,\n  onPageChange: (page: number) => void,\n  perPage: number,\n  currentPage: number,\n}\n\nexport const Pagination = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}: PaginationProps) => {\n  const MAX_PAGE = Math.ceil(total / perPage);\n  const MIN_PAGE = 1;\n  const items = getNumbers(1, total)\n    .map((n: number) => `Item ${n}`);\n\n  const pages = new Array(MAX_PAGE)\n    .fill(0).map((page, pageIndex) => {\n      let nextPage = page;\n\n      nextPage = pageIndex + 1;\n\n      return nextPage;\n    });\n\n  const isFirstPage = currentPage === MIN_PAGE;\n  const isLastPage = currentPage === MAX_PAGE;\n  const bottomRange = (currentPage - 1) * perPage;\n  const topRange = currentPage * perPage;\n\n  return (\n    <>\n      <ul className=\"pagination\">\n        <li className={`page-item ${isFirstPage && 'disabled'}`}>\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={isFirstPage}\n            onClick={() => !isFirstPage && onPageChange(currentPage - 1)}\n          >\n            «\n          </a>\n        </li>\n        {pages.map(page => (\n          <li\n            className={`page-item ${currentPage === page && 'active'}`}\n            key={page}\n          >\n            <a\n              data-cy=\"pageLink\"\n              className=\"page-link\"\n              href={`#${page}`}\n              onClick={() => onPageChange(page)}\n            >\n              { page }\n            </a>\n          </li>\n        ))}\n        <li className={`page-item ${isLastPage && 'disabled'}`}>\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={isLastPage}\n            onClick={() => !isLastPage && onPageChange(currentPage + 1)}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n      <ul>\n        {items\n          .slice(bottomRange, topRange)\n          .map((item: string) => (\n            <li data-cy=\"item\">{item}</li>\n          ))}\n      </ul>\n    </>\n  );\n};\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport { Pagination } from './components/Pagination';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nconst total = 42;\n\nexport const App: React.FC = () => {\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(5);\n\n  const calculateRange = () => {\n    const currentPages = page * perPage;\n    const bottomRange = currentPages - perPage;\n    const topRange = bottomRange + perPage > total\n      ? total : bottomRange + perPage;\n\n    return `${bottomRange + 1} - ${topRange}`;\n  };\n\n  const handleswitchPerPage = (newPerPage: string) => {\n    if (+newPerPage !== perPage) {\n      setPerPage(+newPerPage);\n      setPage(1);\n    }\n  };\n\n  const handleSwitchPage = (newPage: number) => {\n    setPage(newPage);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${page} (items ${calculateRange()} of ${total})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={(event) => handleswitchPerPage(event.target.value)}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n      <Pagination\n        total={total}\n        perPage={perPage}\n        currentPage={page}\n        onPageChange={handleSwitchPage}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}